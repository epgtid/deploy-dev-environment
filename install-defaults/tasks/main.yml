---
    - name: Run a shell command and register its output as a variable
      ansible.builtin.shell: "uname -r"
      register: os_version
      ignore_errors: true

    - name: Add the gpg key for yarn
      apt_key:
        url: "https://dl.yarnpkg.com/debian/pubkey.gpg"
        state: present   
      tags: [ packages, keys ]

    - name: Add the yarn repo
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main"
        state: present
        update_cache: yes
      tags: [ packages ]

    - name: Add the gpg key for docker
      apt_key:
        url: "https://download.docker.com/linux/ubuntu/gpg"
        state: present   
      tags: [ packages, keys ]

    - name: Add the docker repo
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
        state: present
        update_cache: yes
      tags: [ packages ]

    - name: Install basic packages
      apt: name={{ item }}
          state=latest
      with_items: "{{ packages}}"
      tags: [ packages ]

  
    - name: install default SO headers
      apt:
        state: present
        name:
         - "linux-headers-{{os_version['stdout_lines'][0]}}"

    - name: install go
      apt:
        state: present
        name:
         - golang-go  
         - hugo 
      tags: [ packages ]

    - name: install node 
      shell: |
        curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - && sudo apt-get install -y nodejs
      tags: [ packages ]

    - name: create directories
      file:
        path: "/home/{{USER}}/git"
        state: directory
        owner: "{{USER}}"
        group: "{{USER}}"





    - name: Install the yarn
      apt:
        name: yarn
        state: present   
      tags: [ packages ]     

    - name: Add {{USER}} user
      shell: |
        echo "{{USER}}     ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/{{USER}}

    - name: Customize bashrc
      blockinfile:
        dest: "/home/{{USER}}/.bashrc"
        block: |
          alias ll='ls -latr'
          if [ $TILIX_ID ] || [ $VTE_VERSION ]; then 
                  source /etc/profile.d/vte-2.91.sh  
          fi
          export EDITOR=vim 
          export PATH=$PATH:$HOME 
          export HISTSIZE=10000                 
          alias conf='ssh -t  -l epg  prod-epg-conf-01 n  " sudo /bin/bash"'
          alias ir='      ssh -l epg'
          alias ci='      ssh -t  -l epg ci-epg-vmwar-01    " sudo /bin/bash"'
          alias grafana=' ssh -t  -l epg grafana            " sudo /bin/bash"'
          alias ici='     ssh -t  -l epg prod-epg-icimas-01 " sudo /bin/bash"'
          alias jira='    ssh -t  -l epg prod-epg-jira-01   " sudo /bin/bash"'
          alias vcop='    ssh -t  -l epg pro-dcip-vcop-01   " sudo /bin/bash"'
          #alias inv=" cd /home/jaimevalero/git/epg-airflow/ ;  conda activate epg-airflow ; make  restart"
          alias inv=" cd /home/jaimevalero/git/epg-airflow/ ;  conda activate epg-airflow ;docker-compose -f docker-compose.dev.yaml up -d"
          alias build=" cd /home/jaimevalero/git/epg-airflow/ ;  conda activate epg-airflow ; docker-compose -f docker-compose.dev.yaml build"
          alias h='function hdi(){ howdoi $* -c -n 5; }; hdi'
        marker: '# {mark} ANSIBLE MANAGED BLOCK '
        insertbefore: BOF
        create: yes 

    - name: reinstall libc6
      shell: |
        apt-get install --reinstall libc6-i386
      tags: [ packages ]



    - name: Install docker-compose
      remote_user: "{{USER}}"
      get_url: 
        url : https://github.com/docker/compose/releases/download/{{docker_compose_version}}/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x'


    - name: Install teams
      apt:
        name: teams
        state: present   
      tags: [ packages ]       



    - name: configure docker group
      user:
        name: "{{USER}}"
        groups: "sudo,adm,jaimevalero,docker"
        append: yes
      
    - name: download network drivers
      git: 
        dest: /opt/rtl8812au
        repo: https://github.com/aircrack-ng/rtl8812au.git

    - name: configure network drivers
      shell: |
        cd /opt/rtl8812au
        make && make install
      tags: [  network ]

    - name: Creates VPN cronjob
      cron:
        name: Connect VPN
        user: root
        minute: "*"
        hour:   "1-21"
        weekday: "1-7"
        job:  "/bin/bash /root/vpn.sh 2>&1 >> /var/log/vpn.log" 
      tags:
        - crons

    - name: Creates shutdown cronjob
      cron:
        name: Shutdown.
        user: root
        minute: "40"
        hour:   "23,00"
        weekday: "1-7"
        job:  "shutdown  now" 
      tags:
        - crons